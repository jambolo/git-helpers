# @PROJECT_NAME@ Library

cmake_minimum_required(VERSION 3.23)
project(@PROJECT_NAME@
    VERSION 0.1.0
    DESCRIPTION "@PROJECT_DESCRIPTION@"
    LANGUAGES CXX
)

# Modern CMake policy settings
cmake_policy(SET CMP0077 NEW)  # option() honors normal variables
cmake_policy(SET CMP0135 NEW)  # DOWNLOAD_EXTRACT_TIMESTAMP option

# Feature requirements
include(CMakeDependentOption)
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

#########################################################################
# Build settings                                                        #
#########################################################################

option(BUILD_SHARED_LIBS "Build libraries as DLLs" OFF)

# Set default build type if not specified
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build." FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

# Set debug postfix if not set
if(NOT CMAKE_DEBUG_POSTFIX)
    set(CMAKE_DEBUG_POSTFIX d)
endif()

# Only enable certain features when this is the main project
set(IS_TOP_LEVEL_PROJECT OFF)
if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
    set(IS_TOP_LEVEL_PROJECT ON)
endif()

cmake_dependent_option(${PROJECT_NAME}_BUILD_TESTING
    "Enable building tests for ${PROJECT_NAME}"
    OFF
    "IS_TOP_LEVEL_PROJECT"
    OFF
)

if(IS_TOP_LEVEL_PROJECT)
    set(${PROJECT_NAME}_DOXYGEN_OUTPUT_DIRECTORY "" CACHE PATH "Doxygen output directory (empty to disable)")
else()
    set(${PROJECT_NAME}_DOXYGEN_OUTPUT_DIRECTORY "")
endif()

#########################################################################
# Dependencies                                                          #
#########################################################################

if (${PROJECT_NAME}_BUILD_TESTING)
    include(FetchContent)
    FetchContent_Declare(
        GoogleTest
        GIT_REPOSITORY https://github.com/google/googletest.git
        GIT_TAG        v1.17.0
    )
    FetchContent_MakeAvailable(GoogleTest)
endif()

# include(FetchContent)
# FetchContent_Declare(
#     nlohmann_json
#     GIT_REPOSITORY https://github.com/nlohmann/json.git
#     GIT_TAG v3.12.0
#     GIT_SHALLOW TRUE
# )
# FetchContent_MakeAvailable(nlohmann_json)

# if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
#     find_package(Misc REQUIRED)
# endif()

#########################################################################
# Build                                                                 #
#########################################################################

add_library(${PROJECT_NAME})
add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

set(SOURCES
    include/@PROJECT_NAME@/@PROJECT_NAME@.h
    @PROJECT_NAME@.cpp
)

target_sources(${PROJECT_NAME} PRIVATE ${SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SOURCES})

set(PUBLIC_INCLUDE_PATHS
    $<INSTALL_INTERFACE:include>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
)

set(PRIVATE_INCLUDE_PATHS
    .
    ${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}
)

target_include_directories(${PROJECT_NAME}
    PUBLIC
        ${PUBLIC_INCLUDE_PATHS}
    PRIVATE
#         $<TARGET_PROPERTY:nlohmann_json::nlohmann_json,INTERFACE_INCLUDE_DIRECTORIES>
#         $<$<TARGET_EXISTS:Misc::Misc>:$<TARGET_PROPERTY:Misc::Misc,INTERFACE_INCLUDE_DIRECTORIES>>
#         $<$<AND:$<TARGET_EXISTS:Wx::Wx>,$<BOOL:WIN32>>:$<TARGET_PROPERTY:Wx::Wx,INTERFACE_INCLUDE_DIRECTORIES>>
        ${PRIVATE_INCLUDE_PATHS}
)

if(MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE /W4)
    target_compile_definitions(${PROJECT_NAME}
        PRIVATE
            NOMINMAX
            WIN32_LEAN_AND_MEAN
            VC_EXTRALEAN
            _CRT_SECURE_NO_WARNINGS
            _SECURE_SCL=0
            _SCL_SECURE_NO_WARNINGS
    )
else()
    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -Wpedantic)
endif()

target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)
set_target_properties(${PROJECT_NAME} PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
    CXX_EXTENSIONS OFF
    VERSION ${PROJECT_VERSION}
    SOVERSION ${PROJECT_VERSION_MAJOR}
)

#configure_file("${PROJECT_SOURCE_DIR}/Version.h.in" "${PROJECT_BINARY_DIR}/Version.h")

#########################################################################
# Documentation                                                         #
#########################################################################

if(${PROJECT_NAME}_DOXYGEN_OUTPUT_DIRECTORY)
    find_package(Doxygen)
    if(DOXYGEN_FOUND)
        set(DOXYGEN_OUTPUT_DIRECTORY ${${PROJECT_NAME}_DOXYGEN_OUTPUT_DIRECTORY})
        configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in
                      ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
                      @ONLY)

        add_custom_target(${PROJECT_NAME}_docs
            COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
            COMMENT "Generating ${PROJECT_NAME} API documentation with Doxygen"
            VERBATIM
            SOURCES ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
        )

        add_custom_target(docs ALL DEPENDS ${PROJECT_NAME}_docs)
    else()
        message(WARNING "Doxygen not found. Documentation will not be generated.")
    endif()
else()
    if(IS_TOP_LEVEL_PROJECT)
        message(STATUS "${PROJECT_NAME}: Documentation generation is disabled. Set ${PROJECT_NAME}_DOXYGEN_OUTPUT_DIRECTORY to enable.")
    endif()
endif()

#########################################################################
# Testing                                                               #
#########################################################################

if(${PROJECT_NAME}_BUILD_TESTS)
    include(GoogleTest)
    include(CTest)
    enable_testing()
    message(STATUS "${PROJECT_NAME}: Testing is enabled")

    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt")
        add_subdirectory(test)
    else()
        message(WARNING "${PROJECT_NAME}: test directory not found")
    endif()
else()
    if(IS_TOP_LEVEL_PROJECT)
        message(STATUS "${PROJECT_NAME}: Testing is disabled. Set ${PROJECT_NAME}_BUILD_TESTS to ON to enable.")
    endif()
endif()

#########################################################################
# Installation                                                          #
#########################################################################

# Configure installation paths
set(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})

# Install the library and headers
install(TARGETS ${PROJECT_NAME}
    EXPORT ${PROJECT_NAME}-targets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    FILE_SET HEADERS DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

# Install the targets file
install(EXPORT ${PROJECT_NAME}-targets
    FILE ${PROJECT_NAME}Targets.cmake
    NAMESPACE ${PROJECT_NAME}::
    DESTINATION ${INSTALL_CONFIGDIR}
)

# Create and install package configuration files
write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

# Check if config template exists
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in)
    configure_package_config_file(
        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in
        ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
        INSTALL_DESTINATION ${INSTALL_CONFIGDIR}
    )
else()
    # Create a basic config file if template doesn't exist
    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake "
include(CMakeFindDependencyMacro)
include(\${CMAKE_CURRENT_LIST_DIR}/${PROJECT_NAME}Targets.cmake)
")
endif()

# Install configuration files
install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
    DESTINATION ${INSTALL_CONFIGDIR}
)

# Export from build tree for development
export(EXPORT ${PROJECT_NAME}-targets
    FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake
    NAMESPACE ${PROJECT_NAME}::
)

# Register package in user's package registry (only if top-level)
if(IS_TOP_LEVEL_PROJECT)
    export(PACKAGE ${PROJECT_NAME})
endif()

# Install documentation if built
if(${PROJECT_NAME}_BUILD_DOCS AND DOXYGEN_FOUND)
    install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/docs/
            DESTINATION ${CMAKE_INSTALL_DOCDIR}
            OPTIONAL)
endif()
